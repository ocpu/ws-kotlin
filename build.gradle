plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.2.61'
    id 'org.jetbrains.dokka' version '0.9.16'
    id 'com.jfrog.bintray' version '1.8.0'
    id 'maven'
}

group 'io.opencubes'
version '0.0.1'

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.2.61"
    testCompile "org.junit.jupiter:junit-jupiter-api:5.1.0"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
bintray {
    user = bintrayUser
    key = bintrayKey
    configurations = ['archives']
    pkg {
        repo = "maven"
        name = project.name
        websiteUrl = 'https://github.com/ocpu/ws-kotlin'
        vcsUrl = "https://github.com/ocpu/ws-kotlin.git"
        licenses = ['MIT']
//        publish = true
        version {
            name = project.version
            vcsTag = project.version
        }
    }
}
task createPom {
    doLast {
        pom {
            project {
                packaging "jar"
                groupId project.group
                artifactId archivesBaseName
                version project.version
                name project.name
                description 'A WebSocket implementation'
                url 'https://github.com/ocpu/ws-kotlin'
                licenses {
                    license {
                        name 'MIT'
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id "ocpu"
                        name "Martin HÃ¶vre"
                        email "martin.hovre@opencubes.io"
                    }
                }
                scm {
                    connection "https://github.com/ocpu/ws-kotlin.git"
                    developerConnection "https://github.com/ocpu/ws-kotlin.git"
                    url 'https://github.com/ocpu/ws-kotlin'
                }
            }
        }.writeTo("$buildDir/pom.xml")
    }
}
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
}
task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives file: file("$buildDir/pom.xml"), name: 'pom', builtBy: createPom
}
